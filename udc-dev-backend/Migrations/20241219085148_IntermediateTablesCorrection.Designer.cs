// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using udc_dev_backend.Models;

#nullable disable

namespace udc_dev_backend.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20241219085148_IntermediateTablesCorrection")]
    partial class IntermediateTablesCorrection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("udc_dev_backend.Models.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Enterprise")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("udc_dev_backend.Models.ExperienceTechnology", b =>
                {
                    b.Property<int>("ExperienceId")
                        .HasColumnType("integer");

                    b.Property<int>("TechId")
                        .HasColumnType("integer");

                    b.HasKey("ExperienceId", "TechId");

                    b.HasIndex("TechId");

                    b.ToTable("ExperienceTecnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("udc_dev_backend.Models.ProjectTechnology", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TechId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "TechId");

                    b.HasIndex("TechId");

                    b.ToTable("ProjectTecnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.SocialLinks", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Github")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Linkedin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Web")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Technology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("udc_dev_backend.Models.UserTechnology", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TechId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "TechId");

                    b.HasIndex("TechId");

                    b.ToTable("UserTecnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Experience", b =>
                {
                    b.HasOne("udc_dev_backend.Models.User", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("udc_dev_backend.Models.ExperienceTechnology", b =>
                {
                    b.HasOne("udc_dev_backend.Models.Experience", "Experience")
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("udc_dev_backend.Models.Technology", "Technology")
                        .WithMany("ExperienceTechnologies")
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Experience");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Project", b =>
                {
                    b.HasOne("udc_dev_backend.Models.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("udc_dev_backend.Models.ProjectTechnology", b =>
                {
                    b.HasOne("udc_dev_backend.Models.Project", "Project")
                        .WithMany("ProyectTechnologies")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("udc_dev_backend.Models.Technology", "Technology")
                        .WithMany("ProjectTechnologies")
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Technology");
                });

            modelBuilder.Entity("udc_dev_backend.Models.SocialLinks", b =>
                {
                    b.HasOne("udc_dev_backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("udc_dev_backend.Models.UserTechnology", b =>
                {
                    b.HasOne("udc_dev_backend.Models.Technology", "Technology")
                        .WithMany("UserTechnologies")
                        .HasForeignKey("TechId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("udc_dev_backend.Models.User", "User")
                        .WithMany("UserTechnologies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technology");

                    b.Navigation("User");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Experience", b =>
                {
                    b.Navigation("ExperienceTechnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Project", b =>
                {
                    b.Navigation("ProyectTechnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.Technology", b =>
                {
                    b.Navigation("ExperienceTechnologies");

                    b.Navigation("ProjectTechnologies");

                    b.Navigation("UserTechnologies");
                });

            modelBuilder.Entity("udc_dev_backend.Models.User", b =>
                {
                    b.Navigation("Experiences");

                    b.Navigation("Projects");

                    b.Navigation("UserTechnologies");
                });
#pragma warning restore 612, 618
        }
    }
}
